
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `About` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model About
 * 
 */
export type AboutModel = runtime.Types.Result.DefaultSelection<Prisma.$AboutPayload>

export type AggregateAbout = {
  _count: AboutCountAggregateOutputType | null
  _avg: AboutAvgAggregateOutputType | null
  _sum: AboutSumAggregateOutputType | null
  _min: AboutMinAggregateOutputType | null
  _max: AboutMaxAggregateOutputType | null
}

export type AboutAvgAggregateOutputType = {
  id: number | null
}

export type AboutSumAggregateOutputType = {
  id: number | null
}

export type AboutMinAggregateOutputType = {
  id: number | null
  content: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AboutMaxAggregateOutputType = {
  id: number | null
  content: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AboutCountAggregateOutputType = {
  id: number
  content: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type AboutAvgAggregateInputType = {
  id?: true
}

export type AboutSumAggregateInputType = {
  id?: true
}

export type AboutMinAggregateInputType = {
  id?: true
  content?: true
  createdAt?: true
  updatedAt?: true
}

export type AboutMaxAggregateInputType = {
  id?: true
  content?: true
  createdAt?: true
  updatedAt?: true
}

export type AboutCountAggregateInputType = {
  id?: true
  content?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type AboutAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which About to aggregate.
   */
  where?: Prisma.AboutWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Abouts to fetch.
   */
  orderBy?: Prisma.AboutOrderByWithRelationInput | Prisma.AboutOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AboutWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Abouts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Abouts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Abouts
  **/
  _count?: true | AboutCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AboutAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AboutSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AboutMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AboutMaxAggregateInputType
}

export type GetAboutAggregateType<T extends AboutAggregateArgs> = {
      [P in keyof T & keyof AggregateAbout]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAbout[P]>
    : Prisma.GetScalarType<T[P], AggregateAbout[P]>
}




export type AboutGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AboutWhereInput
  orderBy?: Prisma.AboutOrderByWithAggregationInput | Prisma.AboutOrderByWithAggregationInput[]
  by: Prisma.AboutScalarFieldEnum[] | Prisma.AboutScalarFieldEnum
  having?: Prisma.AboutScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AboutCountAggregateInputType | true
  _avg?: AboutAvgAggregateInputType
  _sum?: AboutSumAggregateInputType
  _min?: AboutMinAggregateInputType
  _max?: AboutMaxAggregateInputType
}

export type AboutGroupByOutputType = {
  id: number
  content: string
  createdAt: Date
  updatedAt: Date
  _count: AboutCountAggregateOutputType | null
  _avg: AboutAvgAggregateOutputType | null
  _sum: AboutSumAggregateOutputType | null
  _min: AboutMinAggregateOutputType | null
  _max: AboutMaxAggregateOutputType | null
}

type GetAboutGroupByPayload<T extends AboutGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AboutGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AboutGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AboutGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AboutGroupByOutputType[P]>
      }
    >
  >



export type AboutWhereInput = {
  AND?: Prisma.AboutWhereInput | Prisma.AboutWhereInput[]
  OR?: Prisma.AboutWhereInput[]
  NOT?: Prisma.AboutWhereInput | Prisma.AboutWhereInput[]
  id?: Prisma.IntFilter<"About"> | number
  content?: Prisma.StringFilter<"About"> | string
  createdAt?: Prisma.DateTimeFilter<"About"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"About"> | Date | string
}

export type AboutOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AboutWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.AboutWhereInput | Prisma.AboutWhereInput[]
  OR?: Prisma.AboutWhereInput[]
  NOT?: Prisma.AboutWhereInput | Prisma.AboutWhereInput[]
  content?: Prisma.StringFilter<"About"> | string
  createdAt?: Prisma.DateTimeFilter<"About"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"About"> | Date | string
}, "id">

export type AboutOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.AboutCountOrderByAggregateInput
  _avg?: Prisma.AboutAvgOrderByAggregateInput
  _max?: Prisma.AboutMaxOrderByAggregateInput
  _min?: Prisma.AboutMinOrderByAggregateInput
  _sum?: Prisma.AboutSumOrderByAggregateInput
}

export type AboutScalarWhereWithAggregatesInput = {
  AND?: Prisma.AboutScalarWhereWithAggregatesInput | Prisma.AboutScalarWhereWithAggregatesInput[]
  OR?: Prisma.AboutScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AboutScalarWhereWithAggregatesInput | Prisma.AboutScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"About"> | number
  content?: Prisma.StringWithAggregatesFilter<"About"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"About"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"About"> | Date | string
}

export type AboutCreateInput = {
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AboutUncheckedCreateInput = {
  id?: number
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AboutUpdateInput = {
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AboutUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AboutCreateManyInput = {
  id?: number
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AboutUpdateManyMutationInput = {
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AboutUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AboutCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AboutAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type AboutMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AboutMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AboutSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}



export type AboutSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  content?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["about"]>

export type AboutSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  content?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["about"]>

export type AboutSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  content?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["about"]>

export type AboutSelectScalar = {
  id?: boolean
  content?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type AboutOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "content" | "createdAt" | "updatedAt", ExtArgs["result"]["about"]>

export type $AboutPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "About"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    content: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["about"]>
  composites: {}
}

export type AboutGetPayload<S extends boolean | null | undefined | AboutDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AboutPayload, S>

export type AboutCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AboutFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AboutCountAggregateInputType | true
  }

export interface AboutDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['About'], meta: { name: 'About' } }
  /**
   * Find zero or one About that matches the filter.
   * @param {AboutFindUniqueArgs} args - Arguments to find a About
   * @example
   * // Get one About
   * const about = await prisma.about.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AboutFindUniqueArgs>(args: Prisma.SelectSubset<T, AboutFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AboutClient<runtime.Types.Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one About that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AboutFindUniqueOrThrowArgs} args - Arguments to find a About
   * @example
   * // Get one About
   * const about = await prisma.about.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AboutFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AboutFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AboutClient<runtime.Types.Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first About that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AboutFindFirstArgs} args - Arguments to find a About
   * @example
   * // Get one About
   * const about = await prisma.about.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AboutFindFirstArgs>(args?: Prisma.SelectSubset<T, AboutFindFirstArgs<ExtArgs>>): Prisma.Prisma__AboutClient<runtime.Types.Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first About that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AboutFindFirstOrThrowArgs} args - Arguments to find a About
   * @example
   * // Get one About
   * const about = await prisma.about.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AboutFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AboutFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AboutClient<runtime.Types.Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Abouts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AboutFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Abouts
   * const abouts = await prisma.about.findMany()
   * 
   * // Get first 10 Abouts
   * const abouts = await prisma.about.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const aboutWithIdOnly = await prisma.about.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AboutFindManyArgs>(args?: Prisma.SelectSubset<T, AboutFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a About.
   * @param {AboutCreateArgs} args - Arguments to create a About.
   * @example
   * // Create one About
   * const About = await prisma.about.create({
   *   data: {
   *     // ... data to create a About
   *   }
   * })
   * 
   */
  create<T extends AboutCreateArgs>(args: Prisma.SelectSubset<T, AboutCreateArgs<ExtArgs>>): Prisma.Prisma__AboutClient<runtime.Types.Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Abouts.
   * @param {AboutCreateManyArgs} args - Arguments to create many Abouts.
   * @example
   * // Create many Abouts
   * const about = await prisma.about.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AboutCreateManyArgs>(args?: Prisma.SelectSubset<T, AboutCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Abouts and returns the data saved in the database.
   * @param {AboutCreateManyAndReturnArgs} args - Arguments to create many Abouts.
   * @example
   * // Create many Abouts
   * const about = await prisma.about.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Abouts and only return the `id`
   * const aboutWithIdOnly = await prisma.about.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AboutCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AboutCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a About.
   * @param {AboutDeleteArgs} args - Arguments to delete one About.
   * @example
   * // Delete one About
   * const About = await prisma.about.delete({
   *   where: {
   *     // ... filter to delete one About
   *   }
   * })
   * 
   */
  delete<T extends AboutDeleteArgs>(args: Prisma.SelectSubset<T, AboutDeleteArgs<ExtArgs>>): Prisma.Prisma__AboutClient<runtime.Types.Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one About.
   * @param {AboutUpdateArgs} args - Arguments to update one About.
   * @example
   * // Update one About
   * const about = await prisma.about.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AboutUpdateArgs>(args: Prisma.SelectSubset<T, AboutUpdateArgs<ExtArgs>>): Prisma.Prisma__AboutClient<runtime.Types.Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Abouts.
   * @param {AboutDeleteManyArgs} args - Arguments to filter Abouts to delete.
   * @example
   * // Delete a few Abouts
   * const { count } = await prisma.about.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AboutDeleteManyArgs>(args?: Prisma.SelectSubset<T, AboutDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Abouts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AboutUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Abouts
   * const about = await prisma.about.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AboutUpdateManyArgs>(args: Prisma.SelectSubset<T, AboutUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Abouts and returns the data updated in the database.
   * @param {AboutUpdateManyAndReturnArgs} args - Arguments to update many Abouts.
   * @example
   * // Update many Abouts
   * const about = await prisma.about.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Abouts and only return the `id`
   * const aboutWithIdOnly = await prisma.about.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AboutUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AboutUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one About.
   * @param {AboutUpsertArgs} args - Arguments to update or create a About.
   * @example
   * // Update or create a About
   * const about = await prisma.about.upsert({
   *   create: {
   *     // ... data to create a About
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the About we want to update
   *   }
   * })
   */
  upsert<T extends AboutUpsertArgs>(args: Prisma.SelectSubset<T, AboutUpsertArgs<ExtArgs>>): Prisma.Prisma__AboutClient<runtime.Types.Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Abouts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AboutCountArgs} args - Arguments to filter Abouts to count.
   * @example
   * // Count the number of Abouts
   * const count = await prisma.about.count({
   *   where: {
   *     // ... the filter for the Abouts we want to count
   *   }
   * })
  **/
  count<T extends AboutCountArgs>(
    args?: Prisma.Subset<T, AboutCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AboutCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a About.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AboutAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AboutAggregateArgs>(args: Prisma.Subset<T, AboutAggregateArgs>): Prisma.PrismaPromise<GetAboutAggregateType<T>>

  /**
   * Group by About.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AboutGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AboutGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AboutGroupByArgs['orderBy'] }
      : { orderBy?: AboutGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AboutGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAboutGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the About model
 */
readonly fields: AboutFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for About.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AboutClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the About model
 */
export interface AboutFieldRefs {
  readonly id: Prisma.FieldRef<"About", 'Int'>
  readonly content: Prisma.FieldRef<"About", 'String'>
  readonly createdAt: Prisma.FieldRef<"About", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"About", 'DateTime'>
}
    

// Custom InputTypes
/**
 * About findUnique
 */
export type AboutFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the About
   */
  select?: Prisma.AboutSelect<ExtArgs> | null
  /**
   * Omit specific fields from the About
   */
  omit?: Prisma.AboutOmit<ExtArgs> | null
  /**
   * Filter, which About to fetch.
   */
  where: Prisma.AboutWhereUniqueInput
}

/**
 * About findUniqueOrThrow
 */
export type AboutFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the About
   */
  select?: Prisma.AboutSelect<ExtArgs> | null
  /**
   * Omit specific fields from the About
   */
  omit?: Prisma.AboutOmit<ExtArgs> | null
  /**
   * Filter, which About to fetch.
   */
  where: Prisma.AboutWhereUniqueInput
}

/**
 * About findFirst
 */
export type AboutFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the About
   */
  select?: Prisma.AboutSelect<ExtArgs> | null
  /**
   * Omit specific fields from the About
   */
  omit?: Prisma.AboutOmit<ExtArgs> | null
  /**
   * Filter, which About to fetch.
   */
  where?: Prisma.AboutWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Abouts to fetch.
   */
  orderBy?: Prisma.AboutOrderByWithRelationInput | Prisma.AboutOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Abouts.
   */
  cursor?: Prisma.AboutWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Abouts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Abouts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Abouts.
   */
  distinct?: Prisma.AboutScalarFieldEnum | Prisma.AboutScalarFieldEnum[]
}

/**
 * About findFirstOrThrow
 */
export type AboutFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the About
   */
  select?: Prisma.AboutSelect<ExtArgs> | null
  /**
   * Omit specific fields from the About
   */
  omit?: Prisma.AboutOmit<ExtArgs> | null
  /**
   * Filter, which About to fetch.
   */
  where?: Prisma.AboutWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Abouts to fetch.
   */
  orderBy?: Prisma.AboutOrderByWithRelationInput | Prisma.AboutOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Abouts.
   */
  cursor?: Prisma.AboutWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Abouts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Abouts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Abouts.
   */
  distinct?: Prisma.AboutScalarFieldEnum | Prisma.AboutScalarFieldEnum[]
}

/**
 * About findMany
 */
export type AboutFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the About
   */
  select?: Prisma.AboutSelect<ExtArgs> | null
  /**
   * Omit specific fields from the About
   */
  omit?: Prisma.AboutOmit<ExtArgs> | null
  /**
   * Filter, which Abouts to fetch.
   */
  where?: Prisma.AboutWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Abouts to fetch.
   */
  orderBy?: Prisma.AboutOrderByWithRelationInput | Prisma.AboutOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Abouts.
   */
  cursor?: Prisma.AboutWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Abouts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Abouts.
   */
  skip?: number
  distinct?: Prisma.AboutScalarFieldEnum | Prisma.AboutScalarFieldEnum[]
}

/**
 * About create
 */
export type AboutCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the About
   */
  select?: Prisma.AboutSelect<ExtArgs> | null
  /**
   * Omit specific fields from the About
   */
  omit?: Prisma.AboutOmit<ExtArgs> | null
  /**
   * The data needed to create a About.
   */
  data: Prisma.XOR<Prisma.AboutCreateInput, Prisma.AboutUncheckedCreateInput>
}

/**
 * About createMany
 */
export type AboutCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Abouts.
   */
  data: Prisma.AboutCreateManyInput | Prisma.AboutCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * About createManyAndReturn
 */
export type AboutCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the About
   */
  select?: Prisma.AboutSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the About
   */
  omit?: Prisma.AboutOmit<ExtArgs> | null
  /**
   * The data used to create many Abouts.
   */
  data: Prisma.AboutCreateManyInput | Prisma.AboutCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * About update
 */
export type AboutUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the About
   */
  select?: Prisma.AboutSelect<ExtArgs> | null
  /**
   * Omit specific fields from the About
   */
  omit?: Prisma.AboutOmit<ExtArgs> | null
  /**
   * The data needed to update a About.
   */
  data: Prisma.XOR<Prisma.AboutUpdateInput, Prisma.AboutUncheckedUpdateInput>
  /**
   * Choose, which About to update.
   */
  where: Prisma.AboutWhereUniqueInput
}

/**
 * About updateMany
 */
export type AboutUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Abouts.
   */
  data: Prisma.XOR<Prisma.AboutUpdateManyMutationInput, Prisma.AboutUncheckedUpdateManyInput>
  /**
   * Filter which Abouts to update
   */
  where?: Prisma.AboutWhereInput
  /**
   * Limit how many Abouts to update.
   */
  limit?: number
}

/**
 * About updateManyAndReturn
 */
export type AboutUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the About
   */
  select?: Prisma.AboutSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the About
   */
  omit?: Prisma.AboutOmit<ExtArgs> | null
  /**
   * The data used to update Abouts.
   */
  data: Prisma.XOR<Prisma.AboutUpdateManyMutationInput, Prisma.AboutUncheckedUpdateManyInput>
  /**
   * Filter which Abouts to update
   */
  where?: Prisma.AboutWhereInput
  /**
   * Limit how many Abouts to update.
   */
  limit?: number
}

/**
 * About upsert
 */
export type AboutUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the About
   */
  select?: Prisma.AboutSelect<ExtArgs> | null
  /**
   * Omit specific fields from the About
   */
  omit?: Prisma.AboutOmit<ExtArgs> | null
  /**
   * The filter to search for the About to update in case it exists.
   */
  where: Prisma.AboutWhereUniqueInput
  /**
   * In case the About found by the `where` argument doesn't exist, create a new About with this data.
   */
  create: Prisma.XOR<Prisma.AboutCreateInput, Prisma.AboutUncheckedCreateInput>
  /**
   * In case the About was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AboutUpdateInput, Prisma.AboutUncheckedUpdateInput>
}

/**
 * About delete
 */
export type AboutDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the About
   */
  select?: Prisma.AboutSelect<ExtArgs> | null
  /**
   * Omit specific fields from the About
   */
  omit?: Prisma.AboutOmit<ExtArgs> | null
  /**
   * Filter which About to delete.
   */
  where: Prisma.AboutWhereUniqueInput
}

/**
 * About deleteMany
 */
export type AboutDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Abouts to delete
   */
  where?: Prisma.AboutWhereInput
  /**
   * Limit how many Abouts to delete.
   */
  limit?: number
}

/**
 * About without action
 */
export type AboutDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the About
   */
  select?: Prisma.AboutSelect<ExtArgs> | null
  /**
   * Omit specific fields from the About
   */
  omit?: Prisma.AboutOmit<ExtArgs> | null
}
