
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Intro` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Intro
 * 
 */
export type IntroModel = runtime.Types.Result.DefaultSelection<Prisma.$IntroPayload>

export type AggregateIntro = {
  _count: IntroCountAggregateOutputType | null
  _avg: IntroAvgAggregateOutputType | null
  _sum: IntroSumAggregateOutputType | null
  _min: IntroMinAggregateOutputType | null
  _max: IntroMaxAggregateOutputType | null
}

export type IntroAvgAggregateOutputType = {
  id: number | null
}

export type IntroSumAggregateOutputType = {
  id: number | null
}

export type IntroMinAggregateOutputType = {
  id: number | null
  name: string | null
  title: string | null
  description: string | null
  upworkLink: string | null
  linkedinLink: string | null
  githubLink: string | null
  profileImageUrl: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type IntroMaxAggregateOutputType = {
  id: number | null
  name: string | null
  title: string | null
  description: string | null
  upworkLink: string | null
  linkedinLink: string | null
  githubLink: string | null
  profileImageUrl: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type IntroCountAggregateOutputType = {
  id: number
  name: number
  title: number
  description: number
  upworkLink: number
  linkedinLink: number
  githubLink: number
  profileImageUrl: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type IntroAvgAggregateInputType = {
  id?: true
}

export type IntroSumAggregateInputType = {
  id?: true
}

export type IntroMinAggregateInputType = {
  id?: true
  name?: true
  title?: true
  description?: true
  upworkLink?: true
  linkedinLink?: true
  githubLink?: true
  profileImageUrl?: true
  createdAt?: true
  updatedAt?: true
}

export type IntroMaxAggregateInputType = {
  id?: true
  name?: true
  title?: true
  description?: true
  upworkLink?: true
  linkedinLink?: true
  githubLink?: true
  profileImageUrl?: true
  createdAt?: true
  updatedAt?: true
}

export type IntroCountAggregateInputType = {
  id?: true
  name?: true
  title?: true
  description?: true
  upworkLink?: true
  linkedinLink?: true
  githubLink?: true
  profileImageUrl?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type IntroAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Intro to aggregate.
   */
  where?: Prisma.IntroWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Intros to fetch.
   */
  orderBy?: Prisma.IntroOrderByWithRelationInput | Prisma.IntroOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.IntroWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Intros from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Intros.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Intros
  **/
  _count?: true | IntroCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: IntroAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: IntroSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: IntroMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: IntroMaxAggregateInputType
}

export type GetIntroAggregateType<T extends IntroAggregateArgs> = {
      [P in keyof T & keyof AggregateIntro]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateIntro[P]>
    : Prisma.GetScalarType<T[P], AggregateIntro[P]>
}




export type IntroGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.IntroWhereInput
  orderBy?: Prisma.IntroOrderByWithAggregationInput | Prisma.IntroOrderByWithAggregationInput[]
  by: Prisma.IntroScalarFieldEnum[] | Prisma.IntroScalarFieldEnum
  having?: Prisma.IntroScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: IntroCountAggregateInputType | true
  _avg?: IntroAvgAggregateInputType
  _sum?: IntroSumAggregateInputType
  _min?: IntroMinAggregateInputType
  _max?: IntroMaxAggregateInputType
}

export type IntroGroupByOutputType = {
  id: number
  name: string
  title: string
  description: string
  upworkLink: string
  linkedinLink: string
  githubLink: string
  profileImageUrl: string
  createdAt: Date
  updatedAt: Date
  _count: IntroCountAggregateOutputType | null
  _avg: IntroAvgAggregateOutputType | null
  _sum: IntroSumAggregateOutputType | null
  _min: IntroMinAggregateOutputType | null
  _max: IntroMaxAggregateOutputType | null
}

type GetIntroGroupByPayload<T extends IntroGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<IntroGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof IntroGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], IntroGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], IntroGroupByOutputType[P]>
      }
    >
  >



export type IntroWhereInput = {
  AND?: Prisma.IntroWhereInput | Prisma.IntroWhereInput[]
  OR?: Prisma.IntroWhereInput[]
  NOT?: Prisma.IntroWhereInput | Prisma.IntroWhereInput[]
  id?: Prisma.IntFilter<"Intro"> | number
  name?: Prisma.StringFilter<"Intro"> | string
  title?: Prisma.StringFilter<"Intro"> | string
  description?: Prisma.StringFilter<"Intro"> | string
  upworkLink?: Prisma.StringFilter<"Intro"> | string
  linkedinLink?: Prisma.StringFilter<"Intro"> | string
  githubLink?: Prisma.StringFilter<"Intro"> | string
  profileImageUrl?: Prisma.StringFilter<"Intro"> | string
  createdAt?: Prisma.DateTimeFilter<"Intro"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Intro"> | Date | string
}

export type IntroOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  upworkLink?: Prisma.SortOrder
  linkedinLink?: Prisma.SortOrder
  githubLink?: Prisma.SortOrder
  profileImageUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type IntroWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.IntroWhereInput | Prisma.IntroWhereInput[]
  OR?: Prisma.IntroWhereInput[]
  NOT?: Prisma.IntroWhereInput | Prisma.IntroWhereInput[]
  name?: Prisma.StringFilter<"Intro"> | string
  title?: Prisma.StringFilter<"Intro"> | string
  description?: Prisma.StringFilter<"Intro"> | string
  upworkLink?: Prisma.StringFilter<"Intro"> | string
  linkedinLink?: Prisma.StringFilter<"Intro"> | string
  githubLink?: Prisma.StringFilter<"Intro"> | string
  profileImageUrl?: Prisma.StringFilter<"Intro"> | string
  createdAt?: Prisma.DateTimeFilter<"Intro"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Intro"> | Date | string
}, "id">

export type IntroOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  upworkLink?: Prisma.SortOrder
  linkedinLink?: Prisma.SortOrder
  githubLink?: Prisma.SortOrder
  profileImageUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.IntroCountOrderByAggregateInput
  _avg?: Prisma.IntroAvgOrderByAggregateInput
  _max?: Prisma.IntroMaxOrderByAggregateInput
  _min?: Prisma.IntroMinOrderByAggregateInput
  _sum?: Prisma.IntroSumOrderByAggregateInput
}

export type IntroScalarWhereWithAggregatesInput = {
  AND?: Prisma.IntroScalarWhereWithAggregatesInput | Prisma.IntroScalarWhereWithAggregatesInput[]
  OR?: Prisma.IntroScalarWhereWithAggregatesInput[]
  NOT?: Prisma.IntroScalarWhereWithAggregatesInput | Prisma.IntroScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Intro"> | number
  name?: Prisma.StringWithAggregatesFilter<"Intro"> | string
  title?: Prisma.StringWithAggregatesFilter<"Intro"> | string
  description?: Prisma.StringWithAggregatesFilter<"Intro"> | string
  upworkLink?: Prisma.StringWithAggregatesFilter<"Intro"> | string
  linkedinLink?: Prisma.StringWithAggregatesFilter<"Intro"> | string
  githubLink?: Prisma.StringWithAggregatesFilter<"Intro"> | string
  profileImageUrl?: Prisma.StringWithAggregatesFilter<"Intro"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Intro"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Intro"> | Date | string
}

export type IntroCreateInput = {
  name: string
  title: string
  description: string
  upworkLink: string
  linkedinLink: string
  githubLink: string
  profileImageUrl: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type IntroUncheckedCreateInput = {
  id?: number
  name: string
  title: string
  description: string
  upworkLink: string
  linkedinLink: string
  githubLink: string
  profileImageUrl: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type IntroUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  upworkLink?: Prisma.StringFieldUpdateOperationsInput | string
  linkedinLink?: Prisma.StringFieldUpdateOperationsInput | string
  githubLink?: Prisma.StringFieldUpdateOperationsInput | string
  profileImageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IntroUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  upworkLink?: Prisma.StringFieldUpdateOperationsInput | string
  linkedinLink?: Prisma.StringFieldUpdateOperationsInput | string
  githubLink?: Prisma.StringFieldUpdateOperationsInput | string
  profileImageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IntroCreateManyInput = {
  id?: number
  name: string
  title: string
  description: string
  upworkLink: string
  linkedinLink: string
  githubLink: string
  profileImageUrl: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type IntroUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  upworkLink?: Prisma.StringFieldUpdateOperationsInput | string
  linkedinLink?: Prisma.StringFieldUpdateOperationsInput | string
  githubLink?: Prisma.StringFieldUpdateOperationsInput | string
  profileImageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IntroUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  upworkLink?: Prisma.StringFieldUpdateOperationsInput | string
  linkedinLink?: Prisma.StringFieldUpdateOperationsInput | string
  githubLink?: Prisma.StringFieldUpdateOperationsInput | string
  profileImageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IntroCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  upworkLink?: Prisma.SortOrder
  linkedinLink?: Prisma.SortOrder
  githubLink?: Prisma.SortOrder
  profileImageUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type IntroAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type IntroMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  upworkLink?: Prisma.SortOrder
  linkedinLink?: Prisma.SortOrder
  githubLink?: Prisma.SortOrder
  profileImageUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type IntroMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  upworkLink?: Prisma.SortOrder
  linkedinLink?: Prisma.SortOrder
  githubLink?: Prisma.SortOrder
  profileImageUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type IntroSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}



export type IntroSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  title?: boolean
  description?: boolean
  upworkLink?: boolean
  linkedinLink?: boolean
  githubLink?: boolean
  profileImageUrl?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["intro"]>

export type IntroSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  title?: boolean
  description?: boolean
  upworkLink?: boolean
  linkedinLink?: boolean
  githubLink?: boolean
  profileImageUrl?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["intro"]>

export type IntroSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  title?: boolean
  description?: boolean
  upworkLink?: boolean
  linkedinLink?: boolean
  githubLink?: boolean
  profileImageUrl?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["intro"]>

export type IntroSelectScalar = {
  id?: boolean
  name?: boolean
  title?: boolean
  description?: boolean
  upworkLink?: boolean
  linkedinLink?: boolean
  githubLink?: boolean
  profileImageUrl?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type IntroOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "title" | "description" | "upworkLink" | "linkedinLink" | "githubLink" | "profileImageUrl" | "createdAt" | "updatedAt", ExtArgs["result"]["intro"]>

export type $IntroPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Intro"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    title: string
    description: string
    upworkLink: string
    linkedinLink: string
    githubLink: string
    profileImageUrl: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["intro"]>
  composites: {}
}

export type IntroGetPayload<S extends boolean | null | undefined | IntroDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$IntroPayload, S>

export type IntroCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<IntroFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: IntroCountAggregateInputType | true
  }

export interface IntroDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Intro'], meta: { name: 'Intro' } }
  /**
   * Find zero or one Intro that matches the filter.
   * @param {IntroFindUniqueArgs} args - Arguments to find a Intro
   * @example
   * // Get one Intro
   * const intro = await prisma.intro.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends IntroFindUniqueArgs>(args: Prisma.SelectSubset<T, IntroFindUniqueArgs<ExtArgs>>): Prisma.Prisma__IntroClient<runtime.Types.Result.GetResult<Prisma.$IntroPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Intro that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {IntroFindUniqueOrThrowArgs} args - Arguments to find a Intro
   * @example
   * // Get one Intro
   * const intro = await prisma.intro.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends IntroFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, IntroFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__IntroClient<runtime.Types.Result.GetResult<Prisma.$IntroPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Intro that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IntroFindFirstArgs} args - Arguments to find a Intro
   * @example
   * // Get one Intro
   * const intro = await prisma.intro.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends IntroFindFirstArgs>(args?: Prisma.SelectSubset<T, IntroFindFirstArgs<ExtArgs>>): Prisma.Prisma__IntroClient<runtime.Types.Result.GetResult<Prisma.$IntroPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Intro that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IntroFindFirstOrThrowArgs} args - Arguments to find a Intro
   * @example
   * // Get one Intro
   * const intro = await prisma.intro.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends IntroFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, IntroFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__IntroClient<runtime.Types.Result.GetResult<Prisma.$IntroPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Intros that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IntroFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Intros
   * const intros = await prisma.intro.findMany()
   * 
   * // Get first 10 Intros
   * const intros = await prisma.intro.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const introWithIdOnly = await prisma.intro.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends IntroFindManyArgs>(args?: Prisma.SelectSubset<T, IntroFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IntroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Intro.
   * @param {IntroCreateArgs} args - Arguments to create a Intro.
   * @example
   * // Create one Intro
   * const Intro = await prisma.intro.create({
   *   data: {
   *     // ... data to create a Intro
   *   }
   * })
   * 
   */
  create<T extends IntroCreateArgs>(args: Prisma.SelectSubset<T, IntroCreateArgs<ExtArgs>>): Prisma.Prisma__IntroClient<runtime.Types.Result.GetResult<Prisma.$IntroPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Intros.
   * @param {IntroCreateManyArgs} args - Arguments to create many Intros.
   * @example
   * // Create many Intros
   * const intro = await prisma.intro.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends IntroCreateManyArgs>(args?: Prisma.SelectSubset<T, IntroCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Intros and returns the data saved in the database.
   * @param {IntroCreateManyAndReturnArgs} args - Arguments to create many Intros.
   * @example
   * // Create many Intros
   * const intro = await prisma.intro.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Intros and only return the `id`
   * const introWithIdOnly = await prisma.intro.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends IntroCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, IntroCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IntroPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Intro.
   * @param {IntroDeleteArgs} args - Arguments to delete one Intro.
   * @example
   * // Delete one Intro
   * const Intro = await prisma.intro.delete({
   *   where: {
   *     // ... filter to delete one Intro
   *   }
   * })
   * 
   */
  delete<T extends IntroDeleteArgs>(args: Prisma.SelectSubset<T, IntroDeleteArgs<ExtArgs>>): Prisma.Prisma__IntroClient<runtime.Types.Result.GetResult<Prisma.$IntroPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Intro.
   * @param {IntroUpdateArgs} args - Arguments to update one Intro.
   * @example
   * // Update one Intro
   * const intro = await prisma.intro.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends IntroUpdateArgs>(args: Prisma.SelectSubset<T, IntroUpdateArgs<ExtArgs>>): Prisma.Prisma__IntroClient<runtime.Types.Result.GetResult<Prisma.$IntroPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Intros.
   * @param {IntroDeleteManyArgs} args - Arguments to filter Intros to delete.
   * @example
   * // Delete a few Intros
   * const { count } = await prisma.intro.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends IntroDeleteManyArgs>(args?: Prisma.SelectSubset<T, IntroDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Intros.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IntroUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Intros
   * const intro = await prisma.intro.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends IntroUpdateManyArgs>(args: Prisma.SelectSubset<T, IntroUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Intros and returns the data updated in the database.
   * @param {IntroUpdateManyAndReturnArgs} args - Arguments to update many Intros.
   * @example
   * // Update many Intros
   * const intro = await prisma.intro.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Intros and only return the `id`
   * const introWithIdOnly = await prisma.intro.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends IntroUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, IntroUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IntroPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Intro.
   * @param {IntroUpsertArgs} args - Arguments to update or create a Intro.
   * @example
   * // Update or create a Intro
   * const intro = await prisma.intro.upsert({
   *   create: {
   *     // ... data to create a Intro
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Intro we want to update
   *   }
   * })
   */
  upsert<T extends IntroUpsertArgs>(args: Prisma.SelectSubset<T, IntroUpsertArgs<ExtArgs>>): Prisma.Prisma__IntroClient<runtime.Types.Result.GetResult<Prisma.$IntroPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Intros.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IntroCountArgs} args - Arguments to filter Intros to count.
   * @example
   * // Count the number of Intros
   * const count = await prisma.intro.count({
   *   where: {
   *     // ... the filter for the Intros we want to count
   *   }
   * })
  **/
  count<T extends IntroCountArgs>(
    args?: Prisma.Subset<T, IntroCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], IntroCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Intro.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IntroAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends IntroAggregateArgs>(args: Prisma.Subset<T, IntroAggregateArgs>): Prisma.PrismaPromise<GetIntroAggregateType<T>>

  /**
   * Group by Intro.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IntroGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends IntroGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: IntroGroupByArgs['orderBy'] }
      : { orderBy?: IntroGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, IntroGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIntroGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Intro model
 */
readonly fields: IntroFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Intro.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__IntroClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Intro model
 */
export interface IntroFieldRefs {
  readonly id: Prisma.FieldRef<"Intro", 'Int'>
  readonly name: Prisma.FieldRef<"Intro", 'String'>
  readonly title: Prisma.FieldRef<"Intro", 'String'>
  readonly description: Prisma.FieldRef<"Intro", 'String'>
  readonly upworkLink: Prisma.FieldRef<"Intro", 'String'>
  readonly linkedinLink: Prisma.FieldRef<"Intro", 'String'>
  readonly githubLink: Prisma.FieldRef<"Intro", 'String'>
  readonly profileImageUrl: Prisma.FieldRef<"Intro", 'String'>
  readonly createdAt: Prisma.FieldRef<"Intro", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Intro", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Intro findUnique
 */
export type IntroFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Intro
   */
  select?: Prisma.IntroSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Intro
   */
  omit?: Prisma.IntroOmit<ExtArgs> | null
  /**
   * Filter, which Intro to fetch.
   */
  where: Prisma.IntroWhereUniqueInput
}

/**
 * Intro findUniqueOrThrow
 */
export type IntroFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Intro
   */
  select?: Prisma.IntroSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Intro
   */
  omit?: Prisma.IntroOmit<ExtArgs> | null
  /**
   * Filter, which Intro to fetch.
   */
  where: Prisma.IntroWhereUniqueInput
}

/**
 * Intro findFirst
 */
export type IntroFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Intro
   */
  select?: Prisma.IntroSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Intro
   */
  omit?: Prisma.IntroOmit<ExtArgs> | null
  /**
   * Filter, which Intro to fetch.
   */
  where?: Prisma.IntroWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Intros to fetch.
   */
  orderBy?: Prisma.IntroOrderByWithRelationInput | Prisma.IntroOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Intros.
   */
  cursor?: Prisma.IntroWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Intros from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Intros.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Intros.
   */
  distinct?: Prisma.IntroScalarFieldEnum | Prisma.IntroScalarFieldEnum[]
}

/**
 * Intro findFirstOrThrow
 */
export type IntroFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Intro
   */
  select?: Prisma.IntroSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Intro
   */
  omit?: Prisma.IntroOmit<ExtArgs> | null
  /**
   * Filter, which Intro to fetch.
   */
  where?: Prisma.IntroWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Intros to fetch.
   */
  orderBy?: Prisma.IntroOrderByWithRelationInput | Prisma.IntroOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Intros.
   */
  cursor?: Prisma.IntroWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Intros from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Intros.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Intros.
   */
  distinct?: Prisma.IntroScalarFieldEnum | Prisma.IntroScalarFieldEnum[]
}

/**
 * Intro findMany
 */
export type IntroFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Intro
   */
  select?: Prisma.IntroSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Intro
   */
  omit?: Prisma.IntroOmit<ExtArgs> | null
  /**
   * Filter, which Intros to fetch.
   */
  where?: Prisma.IntroWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Intros to fetch.
   */
  orderBy?: Prisma.IntroOrderByWithRelationInput | Prisma.IntroOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Intros.
   */
  cursor?: Prisma.IntroWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Intros from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Intros.
   */
  skip?: number
  distinct?: Prisma.IntroScalarFieldEnum | Prisma.IntroScalarFieldEnum[]
}

/**
 * Intro create
 */
export type IntroCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Intro
   */
  select?: Prisma.IntroSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Intro
   */
  omit?: Prisma.IntroOmit<ExtArgs> | null
  /**
   * The data needed to create a Intro.
   */
  data: Prisma.XOR<Prisma.IntroCreateInput, Prisma.IntroUncheckedCreateInput>
}

/**
 * Intro createMany
 */
export type IntroCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Intros.
   */
  data: Prisma.IntroCreateManyInput | Prisma.IntroCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Intro createManyAndReturn
 */
export type IntroCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Intro
   */
  select?: Prisma.IntroSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Intro
   */
  omit?: Prisma.IntroOmit<ExtArgs> | null
  /**
   * The data used to create many Intros.
   */
  data: Prisma.IntroCreateManyInput | Prisma.IntroCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Intro update
 */
export type IntroUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Intro
   */
  select?: Prisma.IntroSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Intro
   */
  omit?: Prisma.IntroOmit<ExtArgs> | null
  /**
   * The data needed to update a Intro.
   */
  data: Prisma.XOR<Prisma.IntroUpdateInput, Prisma.IntroUncheckedUpdateInput>
  /**
   * Choose, which Intro to update.
   */
  where: Prisma.IntroWhereUniqueInput
}

/**
 * Intro updateMany
 */
export type IntroUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Intros.
   */
  data: Prisma.XOR<Prisma.IntroUpdateManyMutationInput, Prisma.IntroUncheckedUpdateManyInput>
  /**
   * Filter which Intros to update
   */
  where?: Prisma.IntroWhereInput
  /**
   * Limit how many Intros to update.
   */
  limit?: number
}

/**
 * Intro updateManyAndReturn
 */
export type IntroUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Intro
   */
  select?: Prisma.IntroSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Intro
   */
  omit?: Prisma.IntroOmit<ExtArgs> | null
  /**
   * The data used to update Intros.
   */
  data: Prisma.XOR<Prisma.IntroUpdateManyMutationInput, Prisma.IntroUncheckedUpdateManyInput>
  /**
   * Filter which Intros to update
   */
  where?: Prisma.IntroWhereInput
  /**
   * Limit how many Intros to update.
   */
  limit?: number
}

/**
 * Intro upsert
 */
export type IntroUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Intro
   */
  select?: Prisma.IntroSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Intro
   */
  omit?: Prisma.IntroOmit<ExtArgs> | null
  /**
   * The filter to search for the Intro to update in case it exists.
   */
  where: Prisma.IntroWhereUniqueInput
  /**
   * In case the Intro found by the `where` argument doesn't exist, create a new Intro with this data.
   */
  create: Prisma.XOR<Prisma.IntroCreateInput, Prisma.IntroUncheckedCreateInput>
  /**
   * In case the Intro was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.IntroUpdateInput, Prisma.IntroUncheckedUpdateInput>
}

/**
 * Intro delete
 */
export type IntroDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Intro
   */
  select?: Prisma.IntroSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Intro
   */
  omit?: Prisma.IntroOmit<ExtArgs> | null
  /**
   * Filter which Intro to delete.
   */
  where: Prisma.IntroWhereUniqueInput
}

/**
 * Intro deleteMany
 */
export type IntroDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Intros to delete
   */
  where?: Prisma.IntroWhereInput
  /**
   * Limit how many Intros to delete.
   */
  limit?: number
}

/**
 * Intro without action
 */
export type IntroDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Intro
   */
  select?: Prisma.IntroSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Intro
   */
  omit?: Prisma.IntroOmit<ExtArgs> | null
}
