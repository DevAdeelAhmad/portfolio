
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Skill` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Skill
 * 
 */
export type SkillModel = runtime.Types.Result.DefaultSelection<Prisma.$SkillPayload>

export type AggregateSkill = {
  _count: SkillCountAggregateOutputType | null
  _avg: SkillAvgAggregateOutputType | null
  _sum: SkillSumAggregateOutputType | null
  _min: SkillMinAggregateOutputType | null
  _max: SkillMaxAggregateOutputType | null
}

export type SkillAvgAggregateOutputType = {
  id: number | null
  order: number | null
}

export type SkillSumAggregateOutputType = {
  id: number | null
  order: number | null
}

export type SkillMinAggregateOutputType = {
  id: number | null
  name: string | null
  order: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type SkillMaxAggregateOutputType = {
  id: number | null
  name: string | null
  order: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type SkillCountAggregateOutputType = {
  id: number
  name: number
  order: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type SkillAvgAggregateInputType = {
  id?: true
  order?: true
}

export type SkillSumAggregateInputType = {
  id?: true
  order?: true
}

export type SkillMinAggregateInputType = {
  id?: true
  name?: true
  order?: true
  createdAt?: true
  updatedAt?: true
}

export type SkillMaxAggregateInputType = {
  id?: true
  name?: true
  order?: true
  createdAt?: true
  updatedAt?: true
}

export type SkillCountAggregateInputType = {
  id?: true
  name?: true
  order?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type SkillAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Skill to aggregate.
   */
  where?: Prisma.SkillWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Skills to fetch.
   */
  orderBy?: Prisma.SkillOrderByWithRelationInput | Prisma.SkillOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SkillWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Skills from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Skills.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Skills
  **/
  _count?: true | SkillCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SkillAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SkillSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SkillMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SkillMaxAggregateInputType
}

export type GetSkillAggregateType<T extends SkillAggregateArgs> = {
      [P in keyof T & keyof AggregateSkill]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSkill[P]>
    : Prisma.GetScalarType<T[P], AggregateSkill[P]>
}




export type SkillGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SkillWhereInput
  orderBy?: Prisma.SkillOrderByWithAggregationInput | Prisma.SkillOrderByWithAggregationInput[]
  by: Prisma.SkillScalarFieldEnum[] | Prisma.SkillScalarFieldEnum
  having?: Prisma.SkillScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SkillCountAggregateInputType | true
  _avg?: SkillAvgAggregateInputType
  _sum?: SkillSumAggregateInputType
  _min?: SkillMinAggregateInputType
  _max?: SkillMaxAggregateInputType
}

export type SkillGroupByOutputType = {
  id: number
  name: string
  order: number
  createdAt: Date
  updatedAt: Date
  _count: SkillCountAggregateOutputType | null
  _avg: SkillAvgAggregateOutputType | null
  _sum: SkillSumAggregateOutputType | null
  _min: SkillMinAggregateOutputType | null
  _max: SkillMaxAggregateOutputType | null
}

type GetSkillGroupByPayload<T extends SkillGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SkillGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SkillGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SkillGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SkillGroupByOutputType[P]>
      }
    >
  >



export type SkillWhereInput = {
  AND?: Prisma.SkillWhereInput | Prisma.SkillWhereInput[]
  OR?: Prisma.SkillWhereInput[]
  NOT?: Prisma.SkillWhereInput | Prisma.SkillWhereInput[]
  id?: Prisma.IntFilter<"Skill"> | number
  name?: Prisma.StringFilter<"Skill"> | string
  order?: Prisma.IntFilter<"Skill"> | number
  createdAt?: Prisma.DateTimeFilter<"Skill"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Skill"> | Date | string
}

export type SkillOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  order?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SkillWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  name?: string
  AND?: Prisma.SkillWhereInput | Prisma.SkillWhereInput[]
  OR?: Prisma.SkillWhereInput[]
  NOT?: Prisma.SkillWhereInput | Prisma.SkillWhereInput[]
  order?: Prisma.IntFilter<"Skill"> | number
  createdAt?: Prisma.DateTimeFilter<"Skill"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Skill"> | Date | string
}, "id" | "name">

export type SkillOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  order?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.SkillCountOrderByAggregateInput
  _avg?: Prisma.SkillAvgOrderByAggregateInput
  _max?: Prisma.SkillMaxOrderByAggregateInput
  _min?: Prisma.SkillMinOrderByAggregateInput
  _sum?: Prisma.SkillSumOrderByAggregateInput
}

export type SkillScalarWhereWithAggregatesInput = {
  AND?: Prisma.SkillScalarWhereWithAggregatesInput | Prisma.SkillScalarWhereWithAggregatesInput[]
  OR?: Prisma.SkillScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SkillScalarWhereWithAggregatesInput | Prisma.SkillScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Skill"> | number
  name?: Prisma.StringWithAggregatesFilter<"Skill"> | string
  order?: Prisma.IntWithAggregatesFilter<"Skill"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Skill"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Skill"> | Date | string
}

export type SkillCreateInput = {
  name: string
  order?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SkillUncheckedCreateInput = {
  id?: number
  name: string
  order?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SkillUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SkillUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SkillCreateManyInput = {
  id?: number
  name: string
  order?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SkillUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SkillUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SkillCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  order?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SkillAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  order?: Prisma.SortOrder
}

export type SkillMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  order?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SkillMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  order?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SkillSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  order?: Prisma.SortOrder
}



export type SkillSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  order?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["skill"]>

export type SkillSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  order?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["skill"]>

export type SkillSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  order?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["skill"]>

export type SkillSelectScalar = {
  id?: boolean
  name?: boolean
  order?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type SkillOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "order" | "createdAt" | "updatedAt", ExtArgs["result"]["skill"]>

export type $SkillPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Skill"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    order: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["skill"]>
  composites: {}
}

export type SkillGetPayload<S extends boolean | null | undefined | SkillDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SkillPayload, S>

export type SkillCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SkillFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SkillCountAggregateInputType | true
  }

export interface SkillDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Skill'], meta: { name: 'Skill' } }
  /**
   * Find zero or one Skill that matches the filter.
   * @param {SkillFindUniqueArgs} args - Arguments to find a Skill
   * @example
   * // Get one Skill
   * const skill = await prisma.skill.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SkillFindUniqueArgs>(args: Prisma.SelectSubset<T, SkillFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SkillClient<runtime.Types.Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Skill that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SkillFindUniqueOrThrowArgs} args - Arguments to find a Skill
   * @example
   * // Get one Skill
   * const skill = await prisma.skill.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SkillFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SkillFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SkillClient<runtime.Types.Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Skill that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SkillFindFirstArgs} args - Arguments to find a Skill
   * @example
   * // Get one Skill
   * const skill = await prisma.skill.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SkillFindFirstArgs>(args?: Prisma.SelectSubset<T, SkillFindFirstArgs<ExtArgs>>): Prisma.Prisma__SkillClient<runtime.Types.Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Skill that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SkillFindFirstOrThrowArgs} args - Arguments to find a Skill
   * @example
   * // Get one Skill
   * const skill = await prisma.skill.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SkillFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SkillFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SkillClient<runtime.Types.Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Skills that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SkillFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Skills
   * const skills = await prisma.skill.findMany()
   * 
   * // Get first 10 Skills
   * const skills = await prisma.skill.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const skillWithIdOnly = await prisma.skill.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SkillFindManyArgs>(args?: Prisma.SelectSubset<T, SkillFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Skill.
   * @param {SkillCreateArgs} args - Arguments to create a Skill.
   * @example
   * // Create one Skill
   * const Skill = await prisma.skill.create({
   *   data: {
   *     // ... data to create a Skill
   *   }
   * })
   * 
   */
  create<T extends SkillCreateArgs>(args: Prisma.SelectSubset<T, SkillCreateArgs<ExtArgs>>): Prisma.Prisma__SkillClient<runtime.Types.Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Skills.
   * @param {SkillCreateManyArgs} args - Arguments to create many Skills.
   * @example
   * // Create many Skills
   * const skill = await prisma.skill.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SkillCreateManyArgs>(args?: Prisma.SelectSubset<T, SkillCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Skills and returns the data saved in the database.
   * @param {SkillCreateManyAndReturnArgs} args - Arguments to create many Skills.
   * @example
   * // Create many Skills
   * const skill = await prisma.skill.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Skills and only return the `id`
   * const skillWithIdOnly = await prisma.skill.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SkillCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SkillCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Skill.
   * @param {SkillDeleteArgs} args - Arguments to delete one Skill.
   * @example
   * // Delete one Skill
   * const Skill = await prisma.skill.delete({
   *   where: {
   *     // ... filter to delete one Skill
   *   }
   * })
   * 
   */
  delete<T extends SkillDeleteArgs>(args: Prisma.SelectSubset<T, SkillDeleteArgs<ExtArgs>>): Prisma.Prisma__SkillClient<runtime.Types.Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Skill.
   * @param {SkillUpdateArgs} args - Arguments to update one Skill.
   * @example
   * // Update one Skill
   * const skill = await prisma.skill.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SkillUpdateArgs>(args: Prisma.SelectSubset<T, SkillUpdateArgs<ExtArgs>>): Prisma.Prisma__SkillClient<runtime.Types.Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Skills.
   * @param {SkillDeleteManyArgs} args - Arguments to filter Skills to delete.
   * @example
   * // Delete a few Skills
   * const { count } = await prisma.skill.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SkillDeleteManyArgs>(args?: Prisma.SelectSubset<T, SkillDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Skills.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SkillUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Skills
   * const skill = await prisma.skill.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SkillUpdateManyArgs>(args: Prisma.SelectSubset<T, SkillUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Skills and returns the data updated in the database.
   * @param {SkillUpdateManyAndReturnArgs} args - Arguments to update many Skills.
   * @example
   * // Update many Skills
   * const skill = await prisma.skill.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Skills and only return the `id`
   * const skillWithIdOnly = await prisma.skill.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SkillUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SkillUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Skill.
   * @param {SkillUpsertArgs} args - Arguments to update or create a Skill.
   * @example
   * // Update or create a Skill
   * const skill = await prisma.skill.upsert({
   *   create: {
   *     // ... data to create a Skill
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Skill we want to update
   *   }
   * })
   */
  upsert<T extends SkillUpsertArgs>(args: Prisma.SelectSubset<T, SkillUpsertArgs<ExtArgs>>): Prisma.Prisma__SkillClient<runtime.Types.Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Skills.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SkillCountArgs} args - Arguments to filter Skills to count.
   * @example
   * // Count the number of Skills
   * const count = await prisma.skill.count({
   *   where: {
   *     // ... the filter for the Skills we want to count
   *   }
   * })
  **/
  count<T extends SkillCountArgs>(
    args?: Prisma.Subset<T, SkillCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SkillCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Skill.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SkillAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SkillAggregateArgs>(args: Prisma.Subset<T, SkillAggregateArgs>): Prisma.PrismaPromise<GetSkillAggregateType<T>>

  /**
   * Group by Skill.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SkillGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SkillGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SkillGroupByArgs['orderBy'] }
      : { orderBy?: SkillGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SkillGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkillGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Skill model
 */
readonly fields: SkillFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Skill.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SkillClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Skill model
 */
export interface SkillFieldRefs {
  readonly id: Prisma.FieldRef<"Skill", 'Int'>
  readonly name: Prisma.FieldRef<"Skill", 'String'>
  readonly order: Prisma.FieldRef<"Skill", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Skill", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Skill", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Skill findUnique
 */
export type SkillFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Skill
   */
  select?: Prisma.SkillSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Skill
   */
  omit?: Prisma.SkillOmit<ExtArgs> | null
  /**
   * Filter, which Skill to fetch.
   */
  where: Prisma.SkillWhereUniqueInput
}

/**
 * Skill findUniqueOrThrow
 */
export type SkillFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Skill
   */
  select?: Prisma.SkillSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Skill
   */
  omit?: Prisma.SkillOmit<ExtArgs> | null
  /**
   * Filter, which Skill to fetch.
   */
  where: Prisma.SkillWhereUniqueInput
}

/**
 * Skill findFirst
 */
export type SkillFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Skill
   */
  select?: Prisma.SkillSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Skill
   */
  omit?: Prisma.SkillOmit<ExtArgs> | null
  /**
   * Filter, which Skill to fetch.
   */
  where?: Prisma.SkillWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Skills to fetch.
   */
  orderBy?: Prisma.SkillOrderByWithRelationInput | Prisma.SkillOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Skills.
   */
  cursor?: Prisma.SkillWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Skills from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Skills.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Skills.
   */
  distinct?: Prisma.SkillScalarFieldEnum | Prisma.SkillScalarFieldEnum[]
}

/**
 * Skill findFirstOrThrow
 */
export type SkillFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Skill
   */
  select?: Prisma.SkillSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Skill
   */
  omit?: Prisma.SkillOmit<ExtArgs> | null
  /**
   * Filter, which Skill to fetch.
   */
  where?: Prisma.SkillWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Skills to fetch.
   */
  orderBy?: Prisma.SkillOrderByWithRelationInput | Prisma.SkillOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Skills.
   */
  cursor?: Prisma.SkillWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Skills from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Skills.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Skills.
   */
  distinct?: Prisma.SkillScalarFieldEnum | Prisma.SkillScalarFieldEnum[]
}

/**
 * Skill findMany
 */
export type SkillFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Skill
   */
  select?: Prisma.SkillSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Skill
   */
  omit?: Prisma.SkillOmit<ExtArgs> | null
  /**
   * Filter, which Skills to fetch.
   */
  where?: Prisma.SkillWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Skills to fetch.
   */
  orderBy?: Prisma.SkillOrderByWithRelationInput | Prisma.SkillOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Skills.
   */
  cursor?: Prisma.SkillWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Skills from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Skills.
   */
  skip?: number
  distinct?: Prisma.SkillScalarFieldEnum | Prisma.SkillScalarFieldEnum[]
}

/**
 * Skill create
 */
export type SkillCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Skill
   */
  select?: Prisma.SkillSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Skill
   */
  omit?: Prisma.SkillOmit<ExtArgs> | null
  /**
   * The data needed to create a Skill.
   */
  data: Prisma.XOR<Prisma.SkillCreateInput, Prisma.SkillUncheckedCreateInput>
}

/**
 * Skill createMany
 */
export type SkillCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Skills.
   */
  data: Prisma.SkillCreateManyInput | Prisma.SkillCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Skill createManyAndReturn
 */
export type SkillCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Skill
   */
  select?: Prisma.SkillSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Skill
   */
  omit?: Prisma.SkillOmit<ExtArgs> | null
  /**
   * The data used to create many Skills.
   */
  data: Prisma.SkillCreateManyInput | Prisma.SkillCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Skill update
 */
export type SkillUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Skill
   */
  select?: Prisma.SkillSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Skill
   */
  omit?: Prisma.SkillOmit<ExtArgs> | null
  /**
   * The data needed to update a Skill.
   */
  data: Prisma.XOR<Prisma.SkillUpdateInput, Prisma.SkillUncheckedUpdateInput>
  /**
   * Choose, which Skill to update.
   */
  where: Prisma.SkillWhereUniqueInput
}

/**
 * Skill updateMany
 */
export type SkillUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Skills.
   */
  data: Prisma.XOR<Prisma.SkillUpdateManyMutationInput, Prisma.SkillUncheckedUpdateManyInput>
  /**
   * Filter which Skills to update
   */
  where?: Prisma.SkillWhereInput
  /**
   * Limit how many Skills to update.
   */
  limit?: number
}

/**
 * Skill updateManyAndReturn
 */
export type SkillUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Skill
   */
  select?: Prisma.SkillSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Skill
   */
  omit?: Prisma.SkillOmit<ExtArgs> | null
  /**
   * The data used to update Skills.
   */
  data: Prisma.XOR<Prisma.SkillUpdateManyMutationInput, Prisma.SkillUncheckedUpdateManyInput>
  /**
   * Filter which Skills to update
   */
  where?: Prisma.SkillWhereInput
  /**
   * Limit how many Skills to update.
   */
  limit?: number
}

/**
 * Skill upsert
 */
export type SkillUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Skill
   */
  select?: Prisma.SkillSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Skill
   */
  omit?: Prisma.SkillOmit<ExtArgs> | null
  /**
   * The filter to search for the Skill to update in case it exists.
   */
  where: Prisma.SkillWhereUniqueInput
  /**
   * In case the Skill found by the `where` argument doesn't exist, create a new Skill with this data.
   */
  create: Prisma.XOR<Prisma.SkillCreateInput, Prisma.SkillUncheckedCreateInput>
  /**
   * In case the Skill was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SkillUpdateInput, Prisma.SkillUncheckedUpdateInput>
}

/**
 * Skill delete
 */
export type SkillDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Skill
   */
  select?: Prisma.SkillSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Skill
   */
  omit?: Prisma.SkillOmit<ExtArgs> | null
  /**
   * Filter which Skill to delete.
   */
  where: Prisma.SkillWhereUniqueInput
}

/**
 * Skill deleteMany
 */
export type SkillDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Skills to delete
   */
  where?: Prisma.SkillWhereInput
  /**
   * Limit how many Skills to delete.
   */
  limit?: number
}

/**
 * Skill without action
 */
export type SkillDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Skill
   */
  select?: Prisma.SkillSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Skill
   */
  omit?: Prisma.SkillOmit<ExtArgs> | null
}
